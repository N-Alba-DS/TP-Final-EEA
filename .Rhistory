ranef_df$intercept <- ranef_df$`(Intercept)`
# Añadir nombres para identificar réplicas (si no lo hiciste antes, hazlo ahora)
ranef_df$group <- rownames(ranef_df)
# Ordenar los niveles del factor en el orden que quieras
ranef_df$group <- factor(ranef_df$group, levels = c("1:low", "2:low", "3:low", "4:low",
"5:high", "6:low", "7:low", "8:low",
"9:high", "10:high", "11:high", "12:high",
"13:low", "14:high", "15:high", "16:high"))
# Graficar
ggplot(ranef_df, aes(x = group, y = intercept, ymin = lower, ymax = upper, color = intercept > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(values = c("red", "blue"), guide = "none") +
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()
print(rownames(ranef_df))
ranef_df$group <- rownames(ranef_df)
View(ranef_df)
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
# Renombrar la columna (Intercept)
ranef_df$intercept <- ranef_df$`(Intercept)`
# Añadir nombres para identificar réplicas (si no lo hiciste antes, hazlo ahora)
ranef_df$group <- rownames(ranef_df)
print(rownames(ranef_df))
ranef_df$group <- rownames(ranef_df)
# Ordenar los niveles del factor en el orden que quieras
ranef_df$group <- factor(ranef_df$group, levels = c("1:low", "2:low", "3:low", "4:low",
"5:high", "6:low", "7:low", "8:low",
"9:high", "10:high", "11:high", "12:high",
"13:low", "14:high", "15:high", "16:high"))
# Graficar
ggplot(ranef_df, aes(x = group, y = intercept, ymin = lower, ymax = upper, color = intercept > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(values = c("red", "blue"), guide = "none") +
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
# Renombrar la columna (Intercept)
ranef_df$intercept <- ranef_df$`(Intercept)`
# Añadir nombres para identificar réplicas (si no lo hiciste antes, hazlo ahora)
ranef_df$group <- rownames(ranef_df)
ranef_df$group <- factor(ranef_df$group, levels = c("1:low", "2:low", "3:low", "4:low",
"5:high", "6:low", "7:low", "8:low",
"9:high", "10:high", "11:high", "12:high",
"13:low", "14:high", "15:high", "16:high"))
# Graficar
ggplot(ranef_df, aes(x = group, y = intercept, ymin = lower, ymax = upper, color = intercept >= 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(values = c("red", "blue"), guide = "none") +
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()
View(ranef_m2)
View(ranef_df)
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
# Renombrar la columna (Intercept)
ranef_df$intercept <- ranef_df$`(Intercept)`
# Primero asegúrate de que group contenga los nombres de las filas
ranef_df$group <- rownames(ranef_df)
# Ahora define todos los niveles del factor en el orden que quieras
ranef_df$group <- factor(ranef_df$group,
levels = c("1:low", "2:low", "3:low", "4:low", "5:low",
"6:low", "7:low", "8:low",
"9:high", "10:high", "11:high", "12:high",
"13:low", "14:high", "15:high", "16:high"))
# Ahora al graficar no deberías tener NAs
ggplot(ranef_df, aes(x = group, y = intercept, ymin = lower, ymax = upper, color = intercept > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(values = c("red", "blue"), guide = "none") +
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
# Renombrar la columna (Intercept)
ranef_df$intercept <- ranef_df$`(Intercept)`
# Primero asegúrate de que group contenga los nombres de las filas
ranef_df$group <- rownames(ranef_df)
# Ahora define todos los niveles del factor en el orden que quieras
ranef_df$group <- factor(ranef_df$group,
levels = c("1:low", "2:low", "3:low", "4:low", "5:low",
"6:low", "7:low", "8:low",
"9:high", "10:high", "11:high", "12:high",
"13:high", "14:high", "15:high", "16:high"))
# Ahora al graficar no deberías tener NAs
ggplot(ranef_df, aes(x = group, y = intercept, ymin = lower, ymax = upper, color = intercept > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(values = c("red", "blue"), guide = "none") +
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2_log$`rep`, "postVar")[1, 1, ])
# Renombrar la columna (Intercept)
ranef_df$intercept <- ranef_df$`(Intercept)`
ranef_df$group <- rownames(ranef_df)
# Ahora define todos los niveles del factor en el orden que quieras
ranef_df$group <- factor(ranef_df$group,
levels = c("1:low", "2:low", "3:low", "4:low", "5:low",
"6:low", "7:low", "8:low",
"9:high", "10:high", "11:high", "12:high",
"13:high", "14:high", "15:high", "16:high"))
# Ahora al graficar no deberías tener NAs
ggplot(ranef_df, aes(x = group, y = intercept, ymin = lower, ymax = upper, color = intercept > 0)) +
geom_point(size = 3) +
geom_errorbar(width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
scale_color_manual(values = c("red", "blue"), guide = "none") +
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()
ggplot(data_female, aes(x = dev.time, y = b.mass.em, color = lar.density)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(
method = "lm",
formula = y ~ x + I(x^2),
se = TRUE,    # Si quieres banda de confianza
size = 1.2
) +
scale_color_brewer(palette = "Set2") +
labs(
title = "Development Time vs Body Mass (con término cuadrático)",
x = "Development Time",
y = "Body Mass (em)",
color = "Larval Density"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
legend.position = "top",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "grey20")
)
library(sjPlot)
tab_model(m2, m2_log, show.icc=TRUE, show.re.var=TRUE)
library(sjPlot)
tab_model(m2, m2_log, show.icc=TRUE, show.re.var=TRUE)
anova_results <- anova(m0, m2, m3, m4, m6)
# Convierte la tabla ANOVA a un formato "tidy"
tidy_anova <- tidy(anova_results)
tidy_anova
ggplot(data_female, aes(x = dev.time, y = b.mass.em, color = lar.density)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth(method = "lm", se = FALSE, size = 1.2) +
scale_color_brewer(palette = "Set2") +
labs(
title = "Development Time vs Body Mass",
x = "Development Time",
y = "Body Mass (em)",
color = "Larval Density"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
legend.position = "top",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "grey20")
)
ggplot(data_female, aes(x = dev.time, y = b.mass.em, color = lar.density)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_brewer(palette = "Set2") +
labs(
title = "Development Time vs Body Mass",
x = "Development Time",
y = "Body Mass (em)",
color = "Larval Density"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
legend.position = "top",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "grey20")
)
# Comparación con modelo nulo
m0 <- lmer(b.mass.em ~ (1 | rep), data = data_female)
m1= lmer(b.mass.em ~ dev.time * lar.density + (1|rep), data=data_female) #no da sig
m2= lmer(b.mass.em ~ dev.time + lar.density + (1|rep), data=data_female) #parece ser el mejor
m3= lmer(b.mass.em ~ dev.time + (1|rep), data=data_female)
m4= lmer(b.mass.em ~ lar.density + (1|rep), data=data_female)
m5= lm(b.mass.em ~ dev.time + lar.density, data=data_female) #Comparar que pasa si no pongo efectos aleatorios
anova(m2, m5)
anova(m0, m2)
anova(m0, m3)
anova(m0, m4)
anova(m0, m5)
anova(m2, m3)
anova(m2, m4)
anova(m2, m5)
anova(m0, m2)
anova(m0, m3)
anova(m0, m4)
anova(m0, m5)
anova(m2, m3)
anova(m2, m4)
anova(m2, m5)
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2)
pred <- predict(m2)
Bk <- ranef(m2)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2)
pred <- predict(m2)
Bk <- ranef(m2)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
summary(m2_log)
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2_log)
pred <- predict(m2_log)
Bk <- ranef(m2_log)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
summary(m2_log)
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyverse)
library (rmarkdown)
library(readxl)
library(readr)
library(ggmap)
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(GGally)
library (tidymodels)
library (lmtest)
library (car)
library (robustbase)
library(lme4)
library(lmerTest)
library(MuMIn)
data <- read_excel("Larval_counts_emergence_time_and_adult_body_mass.xlsx", sheet = "VarE")
#elimino filas donde masa = "na"
data <- data %>%
filter(b.mass.em != "na") %>%
mutate(b.mass.em = round(as.numeric(b.mass.em), 3)) %>%
mutate(dev.time = round(as.numeric(dev.time), 0)) %>%
select(-block.no)
# Convertir columnas categóricas a factores
data <- data %>%
mutate(
lar.density = as.factor(lar.density),
sex = as.factor(sex),
rep = as.factor(rep)
)
# Boxplot: Relación entre densidad larval, sexo, y masa corporal
ggplot(data, aes(x = lar.density, y = b.mass.em, fill = sex)) +
geom_boxplot() +
labs(
title = "Masa corporal segun densidad larval y sexo",
x = "Densidad larval",
y = "Masa corporal"
) +
theme_minimal()
data %>%
count(sex)
data_female= data %>%
filter(sex=="F")
data_female <- data_female %>%
filter(rep %in% as.character(1:8))
data_female <- data_female %>%
mutate(rep = if_else(lar.density == "high", as.numeric(rep) + 8, as.numeric(rep)))
data_female %>%
group_by(rep) %>%
count()
ggplot(data_female, aes(x = lar.density, y = b.mass.em, fill = lar.density)) +
geom_boxplot() +
scale_color_brewer(palette = "Set2") +
geom_jitter(
size = 1.2,
alpha = 0.8,
color = "black", # Color negro para los puntos
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75)
)+
labs(
title = "Masa corporal segun densidad larval",
x = "Densidad larval",
y = "Masa corporal",
fill = "Larval Density"
) +
theme_minimal()
ggplot(data_female, aes(x = lar.density, y = b.mass.em, fill = factor(rep))) +
geom_boxplot(
outlier.shape = NA,
alpha = 0.7,
position = position_dodge(width = 0.75)
) +
geom_jitter(
size = 1.2,
alpha = 0.8,
color = "black", # Color negro para los puntos
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75)
)+
scale_fill_manual(values = scales::hue_pal()(16), name = "Réplica") +
scale_color_manual(values = scales::hue_pal()(16), name = "Réplica")+
labs(
x = "Densidad Larval",
y = "Masa Corporal",
title = "Boxplot de Masa Corporal por Tratamiento y Réplica"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
strip.text = element_text(size = 10, face = "bold")
)
summary(data_female)
table(data_female$lar.density, data_female$rep)
ggplot(data_female, aes(x = dev.time, y = b.mass.em, color = lar.density)) +
geom_point(size = 3, alpha = 0.8) +
scale_color_brewer(palette = "Set2") +
labs(
title = "Development Time vs Body Mass",
x = "Development Time",
y = "Body Mass (em)",
color = "Larval Density"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
legend.position = "top",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "grey20")
)
# Comparación con modelo nulo
m0 <- lmer(b.mass.em ~ (1 | rep), data = data_female)
m1= lmer(b.mass.em ~ dev.time * lar.density + (1|rep), data=data_female) #no da significativa la interacion.
m2= lmer(b.mass.em ~ dev.time + lar.density + (1|rep), data=data_female)
m3= lmer(b.mass.em ~ dev.time + (1|rep), data=data_female)
m4= lmer(b.mass.em ~ lar.density + (1|rep), data=data_female)
m5= lm(b.mass.em ~ dev.time + lar.density, data=data_female) #Que pasa si no pongo variable de efectos aleatorios
summary(m0)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
summary(m5)
anova(m0, m2)
anova(m0, m3)
anova(m0, m4)
anova(m0, m5)
anova(m2, m3)
anova(m2, m4)
anova(m2, m5)
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2)
pred <- predict(m2)
Bk <- ranef(m2)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
# Transformación logarítmica
data_female$log_b.mass.em <- log(data_female$b.mass.em)
# Ajustar el modelo con la variable transformada
m2_log <- lmer(log_b.mass.em ~ dev.time + lar.density + (1|rep), data = data_female)
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2_log)
pred <- predict(m2_log)
Bk <- ranef(m2_log)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
summary(m2_log)
data_female <- data_female %>%
filter(rep %in% as.character(1:8))
data_female <- data_female %>%
mutate(rep = if_else(lar.density == "high", as.numeric(rep) + 8, as.numeric(rep)))
data_female %>%
group_by(rep) %>%
count()
-1.863e-03 *100
0.6614 *100
r2_values <- r.squaredGLMM(m2_log)
print(r2_values)
