position = position_dodge(width = 0.75)
) +
geom_jitter(
size = 1.2,
alpha = 0.8,
color = "black", # Color negro para los puntos
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75)
)+
scale_fill_manual(values = scales::hue_pal()(16), name = "Réplica") +
scale_color_manual(values = scales::hue_pal()(16), name = "Réplica")+
labs(
x = "Densidad Larval",
y = "Masa Corporal (g)",
title = "Boxplot de Masa Corporal por Tratamiento y Réplica"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
strip.text = element_text(size = 10, face = "bold")
)
summary(data_female)
table(data_female$lar.density, data_female$rep)
table(data$rep, data$lar.density)
# Scatter plot
ggplot(data, aes(x = dev.time, y = b.mass.em, color = sex, shape = lar.density)) +
geom_point(size = 3) +
labs(
title = "Development Time vs. Body Mass",
x = "Development Time",
y = "Body Mass (em)"
) +
theme_minimal()
ggplot(data_female, aes(x = as.factor(rep), y = b.mass.em, fill = lar.density)) +
geom_boxplot() +
labs(
title = "Body Mass Distribution by Block",
x = "Block (block.no)",
y = "Body Mass (em)",
fill = "Larval Density"
) +
theme_minimal()
ggplot(data_female, aes(x = dev.time, y = b.mass.em, color = lar.density )) +
geom_point(size = 3) +
labs(
title = "Development Time vs Body Mass",
x = "Development Time",
y = "Body Mass (em)",
color = "Larval Density"
) +
theme_minimal()
table(data_female$rep, data_female$lar.density)
# Comparación con modelo nulo
m0 <- lmer(b.mass.em ~ (1 | rep), data = data_female)
m1= lmer(b.mass.em ~ dev.time * lar.density + (1|rep), data=data_female) #no da sig
m2= lmer(b.mass.em ~ dev.time + lar.density + (1|rep), data=data_female) #parece ser el mejor
m3= lmer(b.mass.em ~ dev.time + (1|rep), data=data_female)
m4= lmer(b.mass.em ~ lar.density + (1|rep), data=data_female)
m5= lm(b.mass.em ~ dev.time + lar.density, data=data_female) #Comparar que pasa si no pongo efectos aleatorios
m6= lm(b.mass.em ~ dev.time + lar.density + factor(rep), data=data_female) #Hay un efecto de la replica?
summary(m0)
summary(m1) # la interaccion no da significativa
summary(m2)
summary(m3)
summary(m4)
summary(m5)
anova(m0, m2)
anova(m0, m3)
anova(m0, m4)
anova(m2, m3)
anova(m2, m4)
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
# Añadir nombres para identificar réplicas
ranef_df$group <- rownames(ranef_df)
# Graficar los BLUPs con colores y orientación vertical
ggplot(ranef_df, aes(x = reorder(group, `(Intercept)`), y = `(Intercept)`, ymin = lower, ymax = upper, color = `(Intercept)` > 0)) +
geom_point(size = 3) + # Puntos para los efectos aleatorios
geom_errorbar(width = 0.2) + # Intervalos de confianza
geom_hline(yintercept = 0, linetype = "dashed", color = "red") + # Línea en 0
scale_color_manual(values = c("red", "blue"), guide = "none") + # Colores según condición
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()  # Ajustar texto en el eje X
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2)
pred <- predict(m2)
Bk <- ranef(m2)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
# Transformación logarítmica
data_female$log_b.mass.em <- log(data_female$b.mass.em)
# Ajustar el modelo con la variable transformada
m2_log <- lmer(log_b.mass.em ~ dev.time + lar.density + (1|rep:lar.density), data = data_female)
summary(m2_log)
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2_log)
pred <- predict(m2_log)
Bk <- ranef(m2_log)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep:lar.density`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2$`rep:lar.density`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2$`rep:lar.density`, "postVar")[1, 1, ])
# Añadir nombres para identificar réplicas
ranef_df$group <- rownames(ranef_df)
# Extraer el tratamiento ("low" o "high") del nombre del grupo
ranef_df$treatment <- ifelse(grepl("low", ranef_df$group), "low", "high")
# Clasificar los efectos aleatorios en positivos o negativos
ranef_df$sign <- ifelse(ranef_df$`(Intercept)` >= 0, "Positivo", "Negativo")
# Graficar
ggplot(ranef_df, aes(x = `(Intercept)`, y = group, xmin = lower, xmax = upper, color = sign)) +
geom_point(size = 3) + # Puntos para los efectos aleatorios
geom_errorbarh(height = 0.2) + # Intervalos de confianza horizontales
geom_vline(xintercept = 0, linetype = "dashed", color = "red") + # Línea vertical en 0
scale_color_manual(values = c("Positivo" = "blue", "Negativo" = "red")) + # Colores personalizados
facet_wrap(~treatment, nrow = 1) + # Facetas en una fila (lado a lado)
labs(
title = "Efectos Aleatorios (BLUPs) Separados por Tratamiento",
x = "Efectos Aleatorios (Intercepto)",
y = "Réplica",
color = "Signo"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10), # Ajustar texto en el eje Y
strip.text.x = element_text(size = 12, face = "bold"), # Etiquetas de las facetas
panel.spacing = unit(1, "lines") # Espaciado entre las columnas
)
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
# Añadir nombres para identificar réplicas
ranef_df$group <- rownames(ranef_df)
# Graficar los BLUPs con colores y orientación vertical
ggplot(ranef_df, aes(x = reorder(group, `(Intercept)`), y = `(Intercept)`, ymin = lower, ymax = upper, color = `(Intercept)` > 0)) +
geom_point(size = 3) + # Puntos para los efectos aleatorios
geom_errorbar(width = 0.2) + # Intervalos de confianza
geom_hline(yintercept = 0, linetype = "dashed", color = "red") + # Línea en 0
scale_color_manual(values = c("red", "blue"), guide = "none") + # Colores según condición
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()  # Ajustar texto en el eje X
# Extraer las varianzas de los componentes
var_random <- as.data.frame(VarCorr(m2_log))$vcov[1]   # Varianza del intercepto aleatorio (rep)
var_residual <- attr(VarCorr(m2_log), "sc")^2          # Varianza residual
# Calcular el ICC
icc <- var_random / (var_random + var_residual)
icc
library(MuMIn)
r2_values <- r.squaredGLMM(m2_log)
print(r2_values)
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyverse)
library (rmarkdown)
library(readxl)
library(readr)
library(ggmap)
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(GGally)
library (tidymodels)
library (lmtest)
library (car)
library (robustbase)
library(lme4)
library(lmerTest)
data <- read_excel("Larval_counts_emergence_time_and_adult_body_mass.xlsx", sheet = "VarE")
#elimino filas donde masa = "na"
data <- data %>%
filter(b.mass.em != "na") %>%
mutate(b.mass.em = round(as.numeric(b.mass.em), 3)) %>%
mutate(dev.time = round(as.numeric(dev.time), 0)) %>%
select(-block.no)
# Convertir columnas categóricas a factores
data <- data %>%
mutate(
lar.density = as.factor(lar.density),
sex = as.factor(sex),
rep = as.factor(rep)
)
# Boxplot: Relación entre densidad larval, sexo, y masa corporal
ggplot(data, aes(x = lar.density, y = b.mass.em, fill = sex)) +
geom_boxplot() +
labs(
title = "Body Mass by Larval Density and Sex",
x = "Larval Density",
y = "Body Mass (em)"
) +
theme_minimal()
data <- data %>%
filter(rep %in% as.character(1:8))
data <- data %>%
mutate(rep = if_else(lar.density == "high", as.numeric(rep) + 8, as.numeric(rep)))
data %>%
group_by(rep) %>%
count()
ggplot(data, aes(x = rep, y = b.mass.em, fill = lar.density)) +
geom_boxplot() +
labs(
title = "Body Mass Distribution by Block",
x = "Block (block.no)",
y = "Body Mass (em)",
fill = "Larval Density"
) +
theme_minimal()
ggplot(data, aes(x = lar.density, y = b.mass.em)) +
geom_boxplot() +
labs(
title = "Body Mass Distribution by Block",
x = "Block (block.no)",
y = "Body Mass (em)",
fill = "Larval Density"
) +
theme_minimal()
ggplot(data, aes(x = lar.density, y = b.mass.em, fill = lar.density)) +
geom_boxplot() +
labs(
title = "Body Mass Distribution by Block",
x = "Block (block.no)",
y = "Body Mass (em)",
fill = "Larval Density"
) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(tidyverse)
library (rmarkdown)
library(readxl)
library(readr)
library(ggmap)
library(ggplot2)
library(ggthemes)
library(ggrepel)
library(GGally)
library (tidymodels)
library (lmtest)
library (car)
library (robustbase)
library(lme4)
library(lmerTest)
data <- read_excel("Larval_counts_emergence_time_and_adult_body_mass.xlsx", sheet = "VarE")
#elimino filas donde masa = "na"
data <- data %>%
filter(b.mass.em != "na") %>%
mutate(b.mass.em = round(as.numeric(b.mass.em), 3)) %>%
mutate(dev.time = round(as.numeric(dev.time), 0)) %>%
select(-block.no)
# Convertir columnas categóricas a factores
data <- data %>%
mutate(
lar.density = as.factor(lar.density),
sex = as.factor(sex),
rep = as.factor(rep)
)
# Boxplot: Relación entre densidad larval, sexo, y masa corporal
ggplot(data, aes(x = lar.density, y = b.mass.em, fill = sex)) +
geom_boxplot() +
labs(
title = "Body Mass by Larval Density and Sex",
x = "Larval Density",
y = "Body Mass (em)"
) +
theme_minimal()
data %>%
count(sex)
data_female= data %>%
filter(sex=="F")
data_female= data %>%
filter(sex=="F")
data_female <- data_female %>%
filter(rep %in% as.character(1:8))
data_female <- data_female %>%
mutate(rep = if_else(lar.density == "high", as.numeric(rep) + 8, as.numeric(rep)))
data_female %>%
group_by(rep) %>%
count()
ggplot(data_female, aes(x = lar.density, y = b.mass.em, fill = lar.density)) +
geom_boxplot() +
labs(
title = "Body Mass Distribution by Block",
x = "Block (block.no)",
y = "Body Mass (em)",
fill = "Larval Density"
) +
theme_minimal()
ggplot(data_female, aes(x = lar.density, y = b.mass.em, fill = factor(rep))) +
geom_boxplot(
outlier.shape = NA,
alpha = 0.7,
position = position_dodge(width = 0.75)
) +
geom_jitter(
size = 1.2,
alpha = 0.8,
color = "black", # Color negro para los puntos
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75)
)+
scale_fill_manual(values = scales::hue_pal()(16), name = "Réplica") +
scale_color_manual(values = scales::hue_pal()(16), name = "Réplica")+
labs(
x = "Densidad Larval",
y = "Masa Corporal (g)",
title = "Boxplot de Masa Corporal por Tratamiento y Réplica"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
strip.text = element_text(size = 10, face = "bold")
)
summary(data_female)
table(data_female$lar.density, data_female$rep)
# Scatter plot
ggplot(data_female, aes(x = dev.time, y = b.mass.em, color = sex, shape = lar.density)) +
geom_point(size = 3) +
labs(
title = "Development Time vs. Body Mass",
x = "Development Time",
y = "Body Mass (em)"
) +
theme_minimal()
ggplot(data_female, aes(x = as.factor(rep), y = b.mass.em, fill = lar.density)) +
geom_boxplot() +
labs(
title = "Body Mass Distribution by Block",
x = "Block (block.no)",
y = "Body Mass (em)",
fill = "Larval Density"
) +
theme_minimal()
ggplot(data_female, aes(x = dev.time, y = b.mass.em, color = lar.density )) +
geom_point(size = 3) +
labs(
title = "Development Time vs Body Mass",
x = "Development Time",
y = "Body Mass (em)",
color = "Larval Density"
) +
theme_minimal()
# Comparación con modelo nulo
m0 <- lmer(b.mass.em ~ (1 | rep), data = data_female)
m1= lmer(b.mass.em ~ dev.time * lar.density + (1|rep), data=data_female) #no da sig
m2= lmer(b.mass.em ~ dev.time + lar.density + (1|rep), data=data_female) #parece ser el mejor
m3= lmer(b.mass.em ~ dev.time + (1|rep), data=data_female)
m4= lmer(b.mass.em ~ lar.density + (1|rep), data=data_female)
m5= lm(b.mass.em ~ dev.time + lar.density, data=data_female) #Comparar que pasa si no pongo efectos aleatorios
m6= lm(b.mass.em ~ dev.time + lar.density + factor(rep), data=data_female) #Hay un efecto de la replica?
# Comparación con modelo nulo
m0 <- lmer(b.mass.em ~ (1 | rep), data = data_female)
m1= lmer(b.mass.em ~ dev.time * lar.density + (1|rep), data=data_female) #no da sig
m2= lmer(b.mass.em ~ dev.time + lar.density + (1|rep), data=data_female) #parece ser el mejor
m3= lmer(b.mass.em ~ dev.time + (1|rep), data=data_female)
m4= lmer(b.mass.em ~ lar.density + (1|rep), data=data_female)
m5= lm(b.mass.em ~ dev.time + lar.density, data=data_female) #Comparar que pasa si no pongo efectos aleatorios
summary(m0)
summary(m1) # la interaccion no da significativa
summary(m2)
summary(m3)
summary(m4)
summary(m5)
anova(m0, m2)
anova(m0, m3)
anova(m0, m4)
anova(m2, m3)
anova(m2, m4)
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
# Añadir nombres para identificar réplicas
ranef_df$group <- rownames(ranef_df)
# Graficar los BLUPs con colores y orientación vertical
ggplot(ranef_df, aes(x = reorder(group, `(Intercept)`), y = `(Intercept)`, ymin = lower, ymax = upper, color = `(Intercept)` > 0)) +
geom_point(size = 3) + # Puntos para los efectos aleatorios
geom_errorbar(width = 0.2) + # Intervalos de confianza
geom_hline(yintercept = 0, linetype = "dashed", color = "red") + # Línea en 0
scale_color_manual(values = c("red", "blue"), guide = "none") + # Colores según condición
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()  # Ajustar texto en el eje X
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2)
pred <- predict(m2)
Bk <- ranef(m2)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
# Transformación logarítmica
data_female$log_b.mass.em <- log(data_female$b.mass.em)
# Ajustar el modelo con la variable transformada
m2_log <- lmer(log_b.mass.em ~ dev.time + lar.density + (1|rep:lar.density), data = data_female)
summary(m2_log)
# Usando m1 como ejemplo, pero aplica a cualquier modelo
res <- resid(m2_log)
pred <- predict(m2_log)
Bk <- ranef(m2_log)$rep$'(Intercept)'
par(mfrow = c(1, 3))
plot(pred, res, xlab="Predichos", ylab="Residuos", main="Residuos vs Predicciones")
abline(h=0, col="red")
qqnorm(res, main="QQ-plot Residuos")
qqline(res)
qqnorm(Bk, main="QQ-plot Efectos aleatorios")
qqline(Bk)
par(mfrow = c(1, 1))
shapiro.test(res)
shapiro.test(Bk)
# Extraer efectos aleatorios
ranef_m2 <- ranef(m2_log, condVar = TRUE)
# Convertir los efectos aleatorios en un data frame para ggplot
ranef_df <- as.data.frame(ranef_m2$`rep`)
# Añadir los intervalos de confianza (calcula el error estándar)
ranef_df$upper <- ranef_df$`(Intercept)` + 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
ranef_df$lower <- ranef_df$`(Intercept)` - 1.96 * sqrt(attr(ranef_m2$`rep`, "postVar")[1, 1, ])
# Añadir nombres para identificar réplicas
ranef_df$group <- rownames(ranef_df)
# Graficar los BLUPs con colores y orientación vertical
ggplot(ranef_df, aes(x = reorder(group, `(Intercept)`), y = `(Intercept)`, ymin = lower, ymax = upper, color = `(Intercept)` > 0)) +
geom_point(size = 3) + # Puntos para los efectos aleatorios
geom_errorbar(width = 0.2) + # Intervalos de confianza
geom_hline(yintercept = 0, linetype = "dashed", color = "red") + # Línea en 0
scale_color_manual(values = c("red", "blue"), guide = "none") + # Colores según condición
labs(
title = "Efectos Aleatorios (BLUPs)",
x = "Réplica y Tratamiento",
y = "Efectos Aleatorios (Intercepto)"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
coord_flip()  # Ajustar texto en el eje X
# Extraer las varianzas de los componentes
var_random <- as.data.frame(VarCorr(m2_log))$vcov[1]   # Varianza del intercepto aleatorio (rep)
var_residual <- attr(VarCorr(m2_log), "sc")^2          # Varianza residual
# Calcular el ICC
icc <- var_random / (var_random + var_residual)
icc
library(sjPlot)
tab_model(m0, m1, m2_log, m3, m4, show.icc=TRUE, show.re.var=TRUE)
library(sjPlot)
tab_model(m0, m1, m2_log, m3, m4, show.icc=TRUE, show.re.var=TRUE)
